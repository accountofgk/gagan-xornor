public function postAddInstrument(Request $request) {
		try {
		if ($request->ajax()) {
			$location_id = 0;
			$department_id = 0;
			$reader_id = 0;
			$instrument_data = $request->input('instrument_data');
			$master_list = InstrumentMaster::with('instrumenttype')->where('owner_id', $this->user->hospital_id)->where('id', $instrument_data['instrument_master'])->first();
			//Variable added by gagan 4222 26-03-2021
			$manual_code = $request->manual_entered_code;
			$create_instrument_sub_parts = $request->input('create_instrument_sub_parts');
			$rules = array(
				'expiry' => 'required',
				'istagged' => 'required',
				'department' => 'required',
				'vendor_name' => 'required',
				'warranty_to' => 'required',
				'warranty_from' => 'required',
				'instrument_name' => 'required',
				'date_of_purchase' => 'required',
				'instrument_master' => 'required',
				'vendor_instrument_code' => 'required',
				//'manual_entered_code' => 'required',
			);
			$custommessages = [
				'istagged.required' => Lang::get('messages.istagged'),
				'vendor_name.required' => Lang::get('messages.vendor_name'),
				'department.required' => Lang::get('messages.department_select'),
				//'manual_entered_code.required' => Lang::get('messages.manual_entered_code'),
			];
			$short_code_exist = Instruments::where(['short_code'=> $manual_code,'owner_id'=> $this->user->hospital_id])->OrwhereRaw("find_in_set('".$manual_code."',old_short_codes)")->first();
			if($short_code_exist){
				$rules['manual_entered_code'] = 'required';
                $custommessages['manual_entered_code.required'] = "Short code already exists. Please use unique short code";
			}
			if($master_list->type_id != 3){
				$optional_field_mappings = OptionalFieldMapping::where('hospital_id', $this->user->hospital_id)->where('required', 'Y')->get();
				foreach ($optional_field_mappings as $optional_field_mapping) {
					$rules[$optional_field_mapping->original_field_name] = 'required';
					$custommessages[$optional_field_mapping->original_field_name.'.required'] = Lang::get('messages.optional_field');
					if($optional_field_mapping->type == 'Numeric'){
						$rules[$optional_field_mapping->original_field_name] = 'required|numeric';
						$custommessages[$optional_field_mapping->original_field_name.'.numeric'] = Lang::get('messages.optional_field_numeric');
					}else if($optional_field_mapping->type == 'Date'){
						$rules[$optional_field_mapping->original_field_name] = 'required|date';
						$custommessages[$optional_field_mapping->original_field_name.'.date'] = Lang::get('messages.optional_field_date');
					}elseif ($optional_field_mapping->type == 'Alphanumeric') {
						$rules[$optional_field_mapping->original_field_name] = 'required|string|alpha_num';
						$custommessages[$optional_field_mapping->original_field_name.'.alphanumeric'] = Lang::get('messages.optional_field_alphanumeric');
					}
				}
			}
			if ($instrument_data['istagged']['id'] == '2') {
				   $rules['reader_id'] = 'required';
                   $rules['rfid']= 'required';
                   $custommessages['reader_id.required'] = Lang::get('messages.initiate_reader');
				if ($instrument_data['rfid']) {
                    $exist_rfid = Instruments::where('owner_id', $this->user->hospital_id)->where('rfid_code', $instrument_data['rfid'])->first();
                    if(isset($instrument_data['reader_id'])){
                        $reader_id = $instrument_data['reader_id'];
                    }
                    if ($exist_rfid) {
                        $rules['rfid'] = 'unique:instruments,rfid_code, $this->user->hospital_id';
                    }
                }
			}
			$department_data = System::getDepartmentOrLocationwithReaderID($reader_id);
            $location_id = $department_data['location_id'];
            $department_id = $department_data['department_id'];
			if($instrument_data['instrument_id'] !== ''){
			 $code_exist = Instruments::where('owner_id', $this->user->hospital_id)->where('instrument_id', $instrument_data['instrument_id'])->first();
			  	if($code_exist){
			  		$rules['instrument_id'] = Rule::unique('instruments')->ignore($this->user->hospital_id, 'owner_id');
					$custommessages['instrument_id.unique:instruments,instrument_id'] = 'instrument Id code is already exist';
			    }
			} 
			$validator = Validator::make($instrument_data, $rules, $custommessages);
			if ($validator->fails()) {
				$messages = $validator->messages();
				return response()->json(['status' => 'error', 'errors' => $messages]);
			}
			
			$instrument = new Instruments;
			if ($instrument_data['image_name']) {
				$instrument->image = $instrument_data['image_name'];
			}
			$expiry = date('y-m-d', strtotime($instrument_data['expiry']));
			$warranty_to = date('y-m-d', strtotime($instrument_data['warranty_to']));
			$warranty_from = date('Y-m-d', strtotime($instrument_data['warranty_from']));
			$date_of_purchase = date('y-m-d', strtotime($instrument_data['date_of_purchase']));
			$short_name = System::createShortName($master_list['instrumenttype']->type_name, $master_list->instrument_name, 'instruments', $this->user->hospital_id);
			if ($short_name['status'] == 'success') {
				$instrument->short_name = $short_name['shortname'];
			}
			$ud_id = 0;
			if(isset($instrument_data['department'])){
				$ud_id = $instrument_data['department']['id'];
				$instrument->ud_dep_id = $ud_id;
			}
			$response = System::getCreateInstrumentID('instruments', 'instruments', $this->user->hospital_id,$instrument_data['instrument_master'], $ud_id);
			if($instrument_data['instrument_id'] !== ''){
				$instrument->instrument_code = $instrument_data['instrument_id'];
			}
			if($response['status']=='success'){
				$instrument->instrument_id = $response['uniquecode'];
				$instrument->prefix = $response['prefix'];
				$instrument->sr_no = $response['sr_no'];
			}
			$instrument->type_id = $master_list->type_id;
			$instrument->loose_pack = isset($instrument_data['loose_pack']) ? $instrument_data['loose_pack'] : 0;
			if(isset($instrument_data['cost'])){
				$instrument->amount = $instrument_data['cost'];
			}
			if(isset($instrument_data['optional_fields'])){
				foreach ($instrument_data['optional_fields'] as $optional_field) {
					if(isset($optional_field['default_value'])){
						$original_field_name = $optional_field['original_field_name'];
						$instrument->$original_field_name = $optional_field['default_value'];
					}
				}
			}
			$instrument->expiry_date = $expiry;
			$instrument->warranty_to = $warranty_to;
			$instrument->location_id = $location_id;
			$instrument->department_id = $department_id;
			$instrument->warranty_from = $warranty_from;
			$instrument->rfid_code = $instrument_data['rfid'];
			$instrument->owner_id = $this->user->hospital_id;
			$instrument->date_of_purchase = $date_of_purchase;
			$instrument->instrument_master_id = $master_list->id;
			$instrument->name = $instrument_data['instrument_name'];
			$instrument->vendor_uid = $instrument_data['vendor_udi'];
			$instrument->lot_number = $instrument_data['lot_number'];
			$instrument->last_sending_department_id = $department_id;
			$instrument->is_tagged = $instrument_data['istagged']['id'];
			$instrument->vendor_id = $instrument_data['vendor_name']['id'];
			$instrument->serial_number = $instrument_data['serial_number'];
			$instrument->instrument_master_code = $master_list->instrument_code;
			$instrument->vendor_item_code = $instrument_data['vendor_item_code'];
			$instrument->vendor_code = $instrument_data['vendor_instrument_code'];
			if($instrument_data['istagged']['id'] == '2') {
				$instrument->date_of_tagging = date('Y-m-d H:i:s');
				$instrument->last_read_by = $department_data['type'];
				$instrument->last_read_location_id = $department_data['location_id'];
				$instrument->last_read_department_id = $department_data['department_id'];
			}
			$instrument->member_status = 'OK';
			$instrument->usability_status = 'ACTIVE';
			$instrument->workflow_status = 'UNASSIGNED';
			$instrument->save();
			if(!$instrument->short_code){
				$instrument_type = InstrumentTypes::where('id',$instrument->type_id)->first()->type_name;
				$inst_short_code = System::getCompleteShortCode($response['sr_no'], $instrument_type, $instrument->owner_id);
				//Condition added by gagan for fix 4222 26-03-2021
				// if($master_list->code_generation_type == 'auto') 23-02-2022
				if($instrument_data['short_code_toggle'] == 0)
				{
					if($inst_short_code){
						$instrument->short_code = $inst_short_code;
						$instrument->save();
					}
				// } else if($master_list->code_generation_type == 'manual'){ 23-02-2022
				} else if($instrument_data['short_code_toggle'] == 1){	
					if($manual_code){
						$instrument->short_code = $manual_code;
						$inst_short_code = $manual_code;
						$instrument->save();
					}
				} else {
					if($inst_short_code){
						$instrument->short_code = $inst_short_code;
						$instrument->save();
					}
				}	
				//Code Ended			
			}
			if(!$instrument->instrument_id){
				$instrument->instrument_id = $instrument->id;
				$instrument->save();
			}else{
				$sr_table = System::setCountSerialNumber('instruments', 'instruments', $this->user->hospital_id);
			}
			if(!$instrument->instrument_code){
				$instrument->instrument_code = $instrument->instrument_id;
				$instrument->save();
			}
			$instrumentLogBatchId = strtoupper("INSADD".uniqid());			
			$response = System::createInstrumentLog($instrument,$location_id,$reader_id,$instrumentLogBatchId);
				if($response){
                $instrumentlog = InstrumentLogs::where('id',$response)->first();
                if($instrumentlog){
                   //$instrumentlog->module = "ADDINSTRUMENT"; for fix 4356 by gagan 29-09-21
				   $instrumentlog->module = "PACKING_STATION";
                   $instrumentlog->action = "NEW_INSTRUMENT_CREATED";
                   $instrumentlog->save();
                }
			}
			if (strtolower($master_list['instrumenttype']->type_name) == 'instrument') {
				if ($instrument_data['istagged']['id'] == '2') {
					if ($instrument_data['rfid']) {
						$rfid_data = array(
							'type' => 'INSTRUMENT',
							'rfid_code' => $instrument->rfid_code,
							'type_id' => $instrument->id,
							'hospital_id' => $this->user->hospital_id,
						);
						System::createRFIDTagData($rfid_data);
					}
				}
			}
			$instrument_id_explode = explode('-', $instrument->instrument_id);
			$saved_instrument_sub_parts = [];
			if($create_instrument_sub_parts){
				foreach ($create_instrument_sub_parts as $key => $create_instrument_sub_part) {
					$department_data = System::getDepartmentOrLocationwithReaderID($reader_id);
					$instrument_sub_part = new InstrumentSubPart();
					$instrument_sub_part->image = $create_instrument_sub_part['file_name'];
					$short_name = System::createShortName($master_list['instrumenttype']->type_name, $master_list->instrument_name, 'sub_part_instrument', $this->user->hospital_id);
					if ($short_name['status'] == 'success') {
						$instrument_sub_part->short_name = $short_name['shortname'];
					}
					if(isset($instrument_data['department'])){
						$instrument_sub_part->ud_dep_id = $instrument_data['department']['id'];
					}
					if($instrument_data['instrument_id'] !== ''){
						$instrument_sub_part->instrument_code = $instrument_data['instrument_id'];
					}
					if($response['status']=='success'){
						$instrument_sub_part->instrument_id = $response['uniquecode'];
						$instrument_sub_part->prefix = $response['prefix'];
						$instrument_sub_part->sr_no = $response['sr_no'];
					}
					$instrument_id = createSubPartCode($create_instrument_sub_part['sub_part_mastercode'], $instrument_data['department']['code'], $instrument->sr_no, $key+1);
					$instrument_sub_part->belong_instrument_id = $instrument->id;
					$instrument_sub_part->sub_part_master_id = $create_instrument_sub_part['id'];
					if(isset($create_instrument_sub_part['cost'])){
						$instrument_sub_part->amount = $create_instrument_sub_part['cost'];
					}
					$instrument_sub_part->instrument_id = $instrument_id;
					$instrument_sub_part->rfid_code = $create_instrument_sub_part['rfid_code'];
					$instrument_sub_part->owner_id = $this->user->hospital_id;
					$instrument_sub_part->instrument_master_id = $master_list->id;
					$instrument_sub_part->vendor_id = $instrument_data['vendor_name']['id'];
					$instrument_sub_part->instrument_master_code = $master_list->instrument_code;
					$instrument_sub_part->vendor_code = $instrument_data['vendor_instrument_code'];
					$instrument_sub_part->vendor_uid = $instrument_data['vendor_udi'];
					$instrument_sub_part->vendor_item_code = $instrument_data['vendor_item_code'];
					$instrument_sub_part->date_of_purchase = $date_of_purchase;
					$instrument_sub_part->warranty_from = $warranty_from;
					$instrument_sub_part->warranty_to = $warranty_to;
					$instrument_sub_part->expiry_date = $expiry;
					$instrument_sub_part->serial_number = $instrument_data['serial_number'];
					$instrument_sub_part->lot_number = $instrument_data['lot_number'];
					$instrument_sub_part->is_tagged = $create_instrument_sub_part['istagged'] == 2 ? 'YES' : 'NO';
					$instrument_sub_part->name = $create_instrument_sub_part['sub_part_name'];
					$instrument_sub_part->location_id = $location_id;
					$instrument_sub_part->department_id = $department_id;
					$instrument_sub_part->last_sending_department_id = $department_id;
					if($create_instrument_sub_part['istagged'] == 2) {
						$instrument_sub_part->last_read_by = $department_data['type'];
						$instrument_sub_part->last_read_department_id = $department_data['department_id'];
						$instrument_sub_part->last_read_location_id = $department_data['location_id'];
						$instrument_sub_part->date_of_tagging = date('Y-m-d H:i:s');
					}
					$instrument_sub_part->workflow_status = 'UNASSIGNED';
					$instrument_sub_part->member_status = 'OK';
					$instrument_sub_part->usability_status = 'ACTIVE';
					$instrument_sub_part->save();
					if(!$instrument_sub_part->instrument_id){
						$instrument_sub_part->instrument_id = $instrument->id;
						$instrument_sub_part->save();
					}
					if(!$instrument->instrument_code){
						$instrument_sub_part->instrument_code = $instrument->instrument_id;
						$instrument_sub_part->save();
					}
					if(!$instrument_sub_part->short_code){
						$response = System::getCreateInstrumentID('instrument_sub_part', 'instrument_sub_part', $this->user->hospital_id,$instrument_data['instrument_master'], $ud_id);
						$subpart_short_code = System::getCompleteShortCode($response['sr_no'],'subpart',$instrument_sub_part->owner_id);
						//sumit code added for fix 4222 assembly case 05-04-2021
						// if($master_list->code_generation_type == 'auto') 24-02-2022
						if($instrument_data['short_code_toggle'] == 0)
						{
							if($subpart_short_code){
								$instrument_sub_part->short_code = $subpart_short_code;
								$instrument_sub_part->save();
							}
						// } else if($master_list->code_generation_type == 'manual'){ 24-02-2022
						} else if($instrument_data['short_code_toggle'] == 1){
							if(!empty($create_instrument_sub_part['dm_code'])){
								$instrument_sub_part->short_code = $create_instrument_sub_part['dm_code'];
								$subpart_short_code = $create_instrument_sub_part['dm_code'];
								$instrument_sub_part->save();
							}
						} else {
							if($subpart_short_code){
								$instrument_sub_part->short_code = $subpart_short_code;
								$instrument_sub_part->save();
							}
						}
						// if($subpart_short_code){
						// 	$instrument_sub_part->short_code = $subpart_short_code;
						// 	$instrument_sub_part->save();
						// }
						$sr_table = System::setCountSerialNumber('instrument_sub_part', 'instrument_sub_part', $this->user->hospital_id);							
					}					
					
					if($instrument_sub_part->rfid_code){
						$rfid_data = array(
							'type' => 'ASSEMBLY',
							'rfid_code' => $instrument_sub_part->rfid_code,
							'type_id' => $instrument_sub_part->id,
							'hospital_id' => $this->user->hospital_id,
						);
						System::createRFIDTagData($rfid_data);
					}
					if(env('AWS')){
	                  //$image_url= env('AWS_S3_URL').$create_instrument_sub_part['file_name'];
					  $image_url= System::temporaryURLGenerate($create_instrument_sub_part['file_name'],'default-instrument.png');
	                }else{
	                  $image_url = url('/').'/images/uploads/'.$create_instrument_sub_part['file_name'];
	                }
					$saved_instrument_sub_parts[]=array(
						'image_url'=> $image_url,
						'short_code'=> $subpart_short_code,
						'sub_part_code'=> $instrument_id,
						'sub_part_name'=> $create_instrument_sub_part['sub_part_name'],
						'rfid_class' => $create_instrument_sub_part['istagged'] == 2 ? 'fa fa-icons-outer green_rfid_ins' : 'fa fa-icons-outer green_nonrfid_ins',
						'rfid_code' => $create_instrument_sub_part['rfid_code'],
					);
					$ins_sub_part_logs = new  InstrumentSubPartLogs();
					$ins_sub_part_logs->instrument_id = $instrument->id;
					$ins_sub_part_logs->sub_part_instrument_id = $instrument_sub_part->id;
					$ins_sub_part_logs->sub_part_master_id = $instrument_sub_part->sub_part_master_id;
			        $ins_sub_part_logs->state = $instrument_sub_part->workflow_status;
			        $ins_sub_part_logs->location = $department_data['location_id'];
			        $ins_sub_part_logs->department = $department_data['department_id'];
			        $ins_sub_part_logs->handled_by = $this->user->id;
			        $ins_sub_part_logs->old_state = json_encode($instrument_sub_part);
			        $ins_sub_part_logs->new_state = json_encode($instrument_sub_part);
			        $ins_sub_part_logs->read_by = $reader_id;
			        $ins_sub_part_logs->comment = '';
			        $ins_sub_part_logs->open_set_status = 1;
			        $ins_sub_part_logs->hospital_id = $this->user->hospital_id;
			        $ins_sub_part_logs->batch_id = $instrumentLogBatchId;
			        //$ins_sub_part_logs->module = "ADDINSTRUMENT";for fix 4356 by gagan 29-09-21
					$ins_sub_part_logs->module = "PACKING_STATION";
	            	$ins_sub_part_logs->action = "NEW_INSTRUMENT_CREATED";
			        $ins_sub_part_logs->save();
				}

			}
			if($instrument->type_id == 3){
				$check_all_sub_part_rfids = InstrumentSubPart::where('belong_instrument_id', $instrument->id)->where('is_tagged', 'NO')->get();
				if($check_all_sub_part_rfids->count() == 0){
					$instrument->is_tagged = 'YES';
					$instrument->save();
				}
			}
			$message = "$instrument->name with $instrument->instrument_id having DM shortcode $inst_short_code created";
			return response()->json([
				'status' => 'success', 
				'message' => $message, 
				'short_code' => $inst_short_code,
				'instrument_name' => $instrument->name,
				'instrument_id' => $instrument->instrument_id,
				'saved_instrument_sub_parts' => $saved_instrument_sub_parts, 
			]);
		}
		} catch (Exception $e) {
			pr($e->getMessage().' on line '.$e->getLine());die;
		}

	}
	
	
	
-------------------------------------------



 addInstrument: function(next_add) {
                let vm = this;
                vm.isButtonDisabled = true;
                $('#add_instrument').attr('disabled', true);
                $('#add_instrument_more').attr('disabled', true);
                vm.next_add = next_add;
                if(next_add==true){
                    $('#add_instrument_more').html('Saving...');
                }else{
                    $('#add_instrument').html('Adding...');
                }
                vm.errors = [];
                vm.buttonText = 'Adding';
                //added code by gagan for fix 4222   31-03-2021
                 console.log(vm.selected_master.generation_type);
                 //sumit code added assembly case 05-04-2021
                let create_instrument_sub_parts = vm.create_instrument_sub_parts;
                // if(vm.selected_master.generation_type!='manual')
                if(vm.instrument.short_code_toggle == 0)
                {
                    //
                } else {
                    vm.manual_entered_code = vm.select_dm_code;
                    if(!vm.manual_entered_code){
                        vm.submitted = false;
                        vm.isButtonDisabled = false;
                        vm.modaldata = { title: 'Error', type: 'Error', description: 'Please Enter Short Code' };
                        vm.vue_alert = true;
                        return;
                    }
                     // sumit code added for fix assembly case 05-04-2021
                     vm.instrument_submit = true;
                     for (let subp = 0; subp < create_instrument_sub_parts.length; subp++) {
                        create_instrument_sub_parts[subp].subpart_dm_code_error_msg = false;
                        if(!create_instrument_sub_parts[subp].dm_code){
                            vm.submitted = false;
                            create_instrument_sub_parts[subp].subpart_dm_code_error_msg = true;
                            vm.instrument_submit = false;
                            vm.isButtonDisabled = false;
                        }
                     }
                    //end
                }
                //let create_instrument_sub_parts = vm.create_instrument_sub_parts; commented by sumit
                vm.instrument.expiry = $('#expiry').val();
                vm.instrument.warranty_to = $('#warranty_to').data('date');
                vm.instrument.image_name = $('input[name=image_name]').val();
                vm.instrument.warranty_from = $('#warranty_from').data('date');
                vm.instrument.date_of_purchase = $('#date_of_purchase').data('date');
                vm.instrument.optional_fields.forEach(function(optional_field) {
                    let original_field_name = optional_field.original_field_name;
                    vm.instrument[original_field_name] = optional_field.default_value;
                    if(optional_field.type == 'Date'){
                        optional_field.default_value =$('#'+optional_field.original_field_name).data('date');
                        vm.instrument[original_field_name] = optional_field.default_value;
                    }
                });
                let instrument_data = vm.instrument;
                //code pushed in api by gagan for fix 4222 26-03-2021
                 // if condition added sumit 05-04-2021
                if(vm.instrument_submit){
                    axios.post(base_url + '/instruments/add', {'instrument_data':instrument_data, 'create_instrument_sub_parts':create_instrument_sub_parts,'manual_entered_code':vm.manual_entered_code}).then((response) => {
                        $('#add_instrument').attr('disabled',false);
                        $('#add_instrument_more').attr('disabled',false);
                        if(vm.next_add==true){
                            $('#add_instrument_more').html('Save and add another');
                        }else{
                            $('#add_instrument').html('Add');
                        }
                        if (response.data.status == 'error') {
                            $("#exampleModalLon #fullname").val('');
                            $('#exampleModalLong').modal('hide');
                            vm.errors = response.data.errors;
                            vm.submitted = false;
                            vm.isButtonDisabled = false;
                            if(vm.errors.manual_entered_code!=undefined){
                                vm.select_dm_code = ''; vm.manual_entered_code = '';
                                vm.modaldata = { title: 'Error', type: 'Error', description: vm.errors.manual_entered_code[0] };
                                vm.vue_alert = true;
                                return;
                            }
                            if(vm.errors.readers!=undefined){
                                vm.modaldata = { title: 'Error', type: 'Error', description: vm.errors.readers[0] };
                                vm.vue_alert = true;
                            }
                        }
                        else if (response.data.status == 'success') {
                            vm.isButtonDisabled = false;
                            vm.optional_fields.forEach(function(optional_field) {
                                optional_field.default_value = optional_field.temp_default_value ? optional_field.temp_default_value:'';
                            });
                            vm.instrument = {
                                rfid: '',
                                v_name: '',
                                expiry: '',
                                readers: '',
                                reader_id:'',
                                rfid_code:'',
                                lot_number: '',
                                vendor_udi: '',
                                warranty_to: '',
                                warranty_from: '',
                                instrument_id: '',
                                serial_number: '',
                                instrument_name: '',
                                vendor_item_code:'',
                                optional_field1: '',
                                optional_field2: '',
                                optional_field3: '',
                                optional_field4: '',
                                optional_field5: '',
                                optional_field6: '',
                                optional_field7: '',
                                optional_field8: '',
                                optional_field9: '',
                                date_of_purchase: '',
                                optional_field10: '',
                                instrument_master: '',
                                vendor_instrument_code: '',
                                istagged: vm.instrument.istagged,
                                master_id: $('#master_id').val(),
                                optional_fields:vm.optional_fields,
                                image_name: $('input[name=image_name]').val(),
                                short_code_toggle:'',
                            };
                            vm.select_dm_code=''; vm.manual_entered_code='';
                            $('input[name=image_name]').val('');
                            $(".pivot-image-container1").attr('src', $('#default_img_url').val());
                            vm.submitted = true;
                            vm.create_instrument_sub_parts.forEach(function(create_instrument_sub_part) {
                                create_instrument_sub_part.istagged = 1;
                                create_instrument_sub_part.rfid_code = '';
                                create_instrument_sub_part.rfid_sub_part_class = 'fa fa-icons-outer inst_rfid_grey';
                                create_instrument_sub_part.non_rfid_sub_part_class = 'fa fa-icons-outer green_nonrfid_ins';
                            });
                            if(create_instrument_sub_parts.length > 0){
                                vm.saved_instrument_sub_parts = response.data.saved_instrument_sub_parts;
                                vm.saved_instrument_name = response.data.instrument_name;
                                vm.saved_instrument_id = response.data.instrument_id;
                                vm.saved_instrument_shortcode = response.data.short_code;
                                vm.subpart_preview = true;
                                vm.subpart_preview_class = 'block';
                            }else{
                                vm.addins_modal = true;
                                vm.activeAddInsModal = 'block';
                                vm.addins_modal_message = response.data.message;
                            }
                        }
                    });
            }
            },	
